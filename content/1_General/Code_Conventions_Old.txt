---
id: code-con
title: Code Conventions
author: Nathan Wang, Benjamin Qi, Michael Cao, Nathan Chen
description: "Tips on code style and what you may see in our code samples."
prerequisites: 
 - expected
 - modules
 - cpp-tips
---

Here we provide an example of a good set of code conventions to follow. Please note that you do _not_ have to copy our conventions; there is no "right" convention for coding! Since code for the USACO Guide is contributed from several authors, code style may not be uniform<Asterik>We still strive for code that is readable and understandable! Send feedback if a code sample must be improved.</Asterik>

<LanguageSection>

<CPPSection>

`C++` has powerful macros that can substitute short code with longer code. Some authors choose to use them or not to use them, and the choice to use them is yours as well. If you find unrecognizable symbols or functions in our `C++` code, see the macros used in the section titled "Template" below. Everything should compile using the given template.

</CPPSection>

<JavaSection />

<PySection />

</LanguageSection>

If any code does not compile or is hard to read, submit a complaint using the "Contact Us" button.

## General

Note that these conventions mostly apply to `C++` and `Java`.

<Resources>
  <Resource source = "CF" title = "Swift - Competitive C++ Manifesto" url="64218">most material directly from this blog</Resource>
</Resources>

 - Indenting with either tabs or 4 spaces is fine.
 - Binary operators should be spaced on both sides. For example, `a+b` should be written as `a + b` and `x=a+b` should be written as `x = a + b`.
 - Unary operators should only be spaced on the left side, ex. `x = -y`.
 - Semicolons and commas should be spaced on the right side, ex. `f(a, b, c)`.
 - Braces that open on one line should close on another. Always include braces, even if the code inside them is only one line.
 - Parentheses should be spaced from the outside. For example, we would write `if (a == b) {` or `for (int i = 0; i < n; ++i) {`.
 - Use `++x` rather than `x++` to increment a variable (ie. in a `for` loop).
 - Start your `else` statement on the same line as the closing brace of your `if` statement, like so:

<LanguageSection>

<CPPSection>

```cpp
if (a == b) {
	++a;
} else {
	++b;
}
```

</CPPSection>

<JavaSection>

```java
if (a == b) {
	++a;
} else {
	++b;
}
```

</JavaSection>

<PySection>

```py
if (a == b):
	a += 1
else
	b += 1
```

</PySection>

</LanguageSection>
 

 - Use `true / false` for boolean values, not `1 / 0`. 
 - Write comments to explain any uncommon library functions like the C++ functions `__builtin_ffs()` or `tie(a, b, c)`.
 - Write comments to explain anything weird in general! :)

## Template

The "template" refers to code that is assumed to be in every file.

<LanguageSection>

<CPPSection>

Templates in C++ can take advantange of more powerful features than the other contest languages, and they can be more customized to each competitor. Don't be afraid to write your own template or don't use one at all! Regardless, **the USACO Guide will assume the use of the below template in any C++ Code** outside of "Intro."

See [C++ Tips & Tricks](/general/cpp-tips) if any part of this code is new to you.

```cpp
#include <bits/stdc++.h>
using namespace std;

using ll = long long;

using vi = vector<int>;
#define pb push_back
#define rsz resize
#define all(x) begin(x), end(x)
#define sz(x) (int)(x).size()

using pi = pair<int,int>;
#define f first
#define s second
#define mp make_pair

void setIO(string name = "") { // name is nonempty for USACO file I/O
	ios_base::sync_with_stdio(0); cin.tie(0); // see Fast Input & Output
	// alternatively, cin.tie(0)->sync_with_stdio(0);
	if (sz(name)) {
		freopen((name+".in").c_str(), "r", stdin); // see Input & Output
		freopen((name+".out").c_str(), "w", stdout);
	}
}

// the code that we provide requires everything above this line to compile

int main() {
	setIO();

}
```

<!-- Any preferences? Also, this doesn't apply to the custom sorting module, make sure to include all 3! :) -->

Additional C++ Conventions:

 - Avoid the use of macros (`#define`) other than those in the template above.
 - Use `const` in C++ for variables that don't change through the code.
 - Use `make_pair` rather than `{}` to store a pair. 
 - Use `auto` to increase readability (ex. when dealing with iterators). 
 - Use `struct` instead of `class`. <!-- Even if you are copy pasting a `struct`, space it out rather than squeezing it into one line. -->
 - Use UpperCamelCase for custom structs (`SegTree, Point`) and lowerCamelCase for functions (`solve(), binarySearch()`). Constants should be fully capitalized (`INF, MOD, SOME_CONST`). 

</CPPSection>

<JavaSection>

A normal Java template will contain a main method, helpful imports, and some form of I/O (for USACO, this would probably be File I/O)

```java
import java.io.*; //Imports necessary classes to read and write files
import java.util.*; //Imports many useful data structures and algorithms libraries

public class Main { //Name your program whatever you like. Note the class name must match the file name (e.g. this file would be "Main.java")

	public static void main(String[] args) throws Exception { //The code below reads from stdin and also uses a slow input method. Read "Intro - Fast I/O" for other Java I/O techniques.
		Scanner sc = new Scanner(System.in);
		PrintWriter pw = new PrintWriter(System.out);
	}
}

```

</JavaSection>

<PySection />

</LanguageSection>
